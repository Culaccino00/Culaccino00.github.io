<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Culaccino</title>
  
  <subtitle>Welcome to my blog!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-24T08:11:40.993Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Culaccino</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>歌单迁移到Spotify</title>
    <link href="http://example.com/2024/01/24/%E6%AD%8C%E5%8D%95%E8%BF%81%E7%A7%BB%E5%88%B0Spotify/"/>
    <id>http://example.com/2024/01/24/%E6%AD%8C%E5%8D%95%E8%BF%81%E7%A7%BB%E5%88%B0Spotify/</id>
    <published>2024-01-24T07:50:27.000Z</published>
    <updated>2024-01-24T08:11:40.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><del>生命在于折腾</del></p></blockquote><p>最近被推荐了一手 Spotify，音质确实不错，曲库很全，歌曲免费（但非Premium 用户每隔30min会被推送一次广告）。于是决定逐渐放弃已经充了很久绿钻的QQ音乐，转战 Spotify 。</p><p>又来到了略显头疼的歌单迁移问题，一番翻找，找到了一位佬做的（可以白嫖的）小工具，还算比较好用，直接贴出原博文，方便日后需要时翻找：</p><p><a href="https://yyrcd.com/n2s/">迁移 网易云 &#x2F; QQ 音乐到 Apple Music, Youtube Music, Spotify | yyrcd</a></p><p>步骤如下：</p><ol><li><p>输入歌单ID</p></li><li><p>复制生成的文字版歌单</p></li><li><p>原博文给出的 <a href="https://www.tunemymusic.com/zh-CN/transfer">TunemyMusic</a> 网站不甚好用，推荐使用 <a href="https://www.spotlistr.com/wizard">Spotlistr</a> ，选择 “Textbox to Spotify” 粘贴文字版歌单即可。可以逐个选择每个歌曲想要的版本，会提供相似度用来参考。</p></li></ol><p>p.s. 另有一位佬用 golang 开发出了一个<a href="https://music.unmeta.cn/">类似功能的工具</a>，也留个档。</p><p>祝迁移顺利！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;生命在于折腾&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近被推荐了一手 Spotify，音质确实不错，曲库很全，歌曲免费（但非Premium 用户每隔30min会被推送一次广告）。于是决定逐渐放弃已经充了很久绿钻的QQ音乐，</summary>
      
    
    
    
    <category term="Other" scheme="http://example.com/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>C/C++头文件</title>
    <link href="http://example.com/2024/01/21/C-C-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2024/01/21/C-C-%E5%A4%B4%E6%96%87%E4%BB%B6/</id>
    <published>2024-01-21T10:48:14.000Z</published>
    <updated>2024-01-21T10:57:16.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>C Header files offer the features like library functions, data types, macros, etc by importing them into the program with the help of a preprocessor directive <code>#include</code>​. The <code>.h</code>​ is the extension of it.</p></blockquote><h1 id="C-常用头文件"><a href="#C-常用头文件" class="headerlink" title="C++常用头文件"></a>C++常用头文件</h1><p><a href="https://www.apiref.com/cpp-zh/cpp/header.html">C++ 标准库头文件 - C++中文 - API参考文档 (apiref.com)</a></p><ul><li>万能头文件：<code>#include &lt;bits/stdc++.h&gt;</code>​</li><li>数据流输入输出：<code>#include &lt;iostream&gt;</code>​</li><li>算法类函数：<code>#include &lt;algorithm&gt;</code>​</li><li>数学函数（<code>max(), min(), sqrt()...</code>​）：<code>#include &lt;math.h&gt;</code>​或<code>#include &lt;cmath&gt;</code>​</li><li>时间函数：<code>#include &lt;time.h&gt;</code>​</li><li>字符串操作：<code>#include &lt;string&gt;</code>​或<code>#include &lt;cstring&gt;</code>​</li><li>链表：<code>#include &lt;list&gt;</code>​</li><li>向量：<code>#include &lt;vector&gt;</code>​</li><li>图：<code>#include &lt;map&gt;</code>​</li><li>队列：<code>#include &lt;queue&gt;</code>​</li><li>迭代器：<code>#include &lt;iterator&gt;</code></li><li>栈：<code>#include &lt;stack&gt;</code></li></ul><h1 id="引用头文件"><a href="#引用头文件" class="headerlink" title="引用头文件"></a>引用头文件</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>可以使用预处理指令<code>#include</code>​可以引用用户和系统头文件。引用头文件相当于复制头文件的内容。</p><ol><li><p>引用系统头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;file&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>引用用户头文件：（如果在程序目录没有找到引用的头文件则到编译器的类库路径的目录下找该头文件）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;file&quot;</span></span></span><br></pre></td></tr></table></figure></li></ol><p>可以用宏来定义头文件的名称，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SYSTEM_H <span class="string">&quot;system_1.h&quot;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> SYSTEM_H</span></span><br></pre></td></tr></table></figure><h2 id="只引用一次头文件"><a href="#只引用一次头文件" class="headerlink" title="只引用一次头文件"></a>只引用一次头文件</h2><p>如果一个头文件被引用两次，编译器处理两次头文件的内容，会产生错误。为了避免，标准做法是将整个内容放在条件编译语句中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEADER_FILE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADER_FILE</span></span><br><span class="line"></span><br><span class="line">the entire header file file</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>​<code>#ifndef</code>​是包装器，当再次引用此头文件时，条件为假，因为<code>HEADER_FILE</code>​已经定义，于是预处理器跳过文件的全部内容，编译器会忽视它。</p><p>类似地，<code>#ifdef</code>​就表示如果已经定义，就执行下面的语句。</p><h2 id="有条件引用"><a href="#有条件引用" class="headerlink" title="有条件引用"></a>有条件引用</h2><p>有时需要依照不同情况从多个不同的头文件中选择一个引用到程序中。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> SYSTEM_1</span></span><br><span class="line">   <span class="meta"># <span class="keyword">include</span> <span class="string">&quot;system_1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> SYSTEM_2</span></span><br><span class="line">   <span class="meta"># <span class="keyword">include</span> <span class="string">&quot;system_2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> SYSTEM_3</span></span><br><span class="line">   ...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="头文件过多"><a href="#头文件过多" class="headerlink" title="头文件过多"></a>头文件过多</h1><p>在有多个<code>.h</code>​文件和多个<code>.c</code>​文件的时候，可以使用<code>global.h</code>​包含所有的头文件，然后包含<code>global.h</code>​文件就可以实现所有头文件的包含。</p><p>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLOBAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GLOBAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Config.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;C Header files offer the features like library functions, data types, macros, etc by importing them into the program with th</summary>
      
    
    
    
    <category term="Programming" scheme="http://example.com/categories/Programming/"/>
    
    <category term="C/C++" scheme="http://example.com/categories/Programming/C-C/"/>
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/08/06/hello-world/"/>
    <id>http://example.com/2023/08/06/hello-world/</id>
    <published>2023-08-05T16:00:00.000Z</published>
    <updated>2024-01-24T08:14:01.877Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Other" scheme="http://example.com/categories/Other/"/>
    
    
  </entry>
  
</feed>
